From 02662e31cbea2e82bd078f26b164a4fec0136f0b Mon Sep 17 00:00:00 2001
From: EXL <exlmotodev@gmail.com>
Date: Fri, 24 Jan 2014 19:00:15 +0700
Subject: [PATCH 2/3] Fix russian strings overhead

---
 ru/02-git-basics/01-chapter2.markdown    |  6 ++++--
 ru/04-git-server/01-chapter4.markdown    |  2 +-
 ru/06-git-tools/01-chapter6.markdown     | 36 +++++++++++++++++++++-----------
 ru/09-git-internals/01-chapter9.markdown |  8 +++++--
 4 files changed, 35 insertions(+), 17 deletions(-)

diff --git a/ru/02-git-basics/01-chapter2.markdown b/ru/02-git-basics/01-chapter2.markdown
index e2fa37c..7278d3b 100644
--- a/ru/02-git-basics/01-chapter2.markdown
+++ b/ru/02-git-basics/01-chapter2.markdown
@@ -172,9 +172,11 @@ Glob-шаблоны представляют собой упрощённые р
 	# комментарий — эта строка игнорируется
 	# не обрабатывать файлы, имя которых заканчивается на .a
 	*.a
-	# НО отслеживать файл lib.a, несмотря на то, что мы игнорируем все .a файлы с помощью предыдущего правила
+	# НО отслеживать файл lib.a, несмотря на то, что мы игнорируем 
+	# все .a файлы с помощью предыдущего правила
 	!lib.a
-	# игнорировать только файл TODO находящийся в корневом каталоге, не относится к файлам вида subdir/TODO
+	# игнорировать только файл TODO находящийся в корневом каталоге, 
+	# не относится к файлам вида subdir/TODO
 	/TODO
 	# игнорировать все файлы в каталоге build/
 	build/
diff --git a/ru/04-git-server/01-chapter4.markdown b/ru/04-git-server/01-chapter4.markdown
index db26a87..cf44c4a 100644
--- a/ru/04-git-server/01-chapter4.markdown
+++ b/ru/04-git-server/01-chapter4.markdown
@@ -588,7 +588,7 @@ Gitolite несколько необычен, по крайней мере, в 
 
 Второй уровень применим только к доступу на запись и осуществляется по веткам или меткам внутри репозитория. Имя пользователя, запрашиваемый уровень доступа (`W` или `+`) и имя ссылки, которая будет обновлена, известны. Правила доступа проверяются в порядке их появления в конфигурационном файле, в поисках совпадений для этой комбинации (но помните, что имя ссылки сопоставляется с регулярным выражением, а не просто строкой). Если совпадение найдено, отправка (push) проходит успешно. При неудачном исходе доступ запрещается.
 
-### Продвинутый контроль доступа с запрещающими правилами ###
+### Контроль доступа с запрещающими правилами ###
 
 До сих пор у нас были только права вида `R`, `RW` или `RW+`. Однако в Gitolite'е есть другие права доступа: `-` означающий "запретить". Это даёт гораздо больше возможностей в обмен на большую сложность, так как теперь отсутствие разрешающего правила — не *единственный* вариант, при котором пользователю может быть отказано в доступе, так что *порядок правил теперь имеет значение*!
 
diff --git a/ru/06-git-tools/01-chapter6.markdown b/ru/06-git-tools/01-chapter6.markdown
index dbba23f..1e65f0a 100644
--- a/ru/06-git-tools/01-chapter6.markdown
+++ b/ru/06-git-tools/01-chapter6.markdown
@@ -379,18 +379,30 @@ Insert 18333fig0601.png
 На этой стадии у вас много вариантов действий. Набрав `?`, вы получите список возможных действий:
 
 	Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ?
-	y - stage this hunk (добавить этот кусок в индекс)
-	n - do not stage this hunk (не добавлять этот кусок в индекс)
-	a - stage this and all the remaining hunks in the file (добавить этот и все оставшиеся куски в этом файле в индекс)
-	d - do not stage this hunk nor any of the remaining hunks in the file (не добавлять в индекс ни этот, ни последующие куски в этом файле)
-	g - select a hunk to go to (выбрать кусок и перейти к нему)
-	/ - search for a hunk matching the given regex (поиск куска по регулярному выражению)
-	j - leave this hunk undecided, see next undecided hunk (отложить решение для этого куска, перейти к следующему отложенному куску)
-	J - leave this hunk undecided, see next hunk (отложить решение для этого куска, перейти к следующему куску)
-	k - leave this hunk undecided, see previous undecided hunk (отложить решение для этого куска, перейти к предыдущему отложенному куску)
-	K - leave this hunk undecided, see previous hunk (отложить решение для этого куска, перейти к предыдущему куску)
-	s - split the current hunk into smaller hunks (разбить текущий кусок на меньшие части)
-	e - manually edit the current hunk (отредактировать текущий кусок вручную)
+	y - stage this hunk 
+	(добавить этот кусок в индекс)
+	n - do not stage this hunk 
+	(не добавлять этот кусок в индекс)
+	a - stage this and all the remaining hunks in the file 
+	(добавить этот и все оставшиеся куски в этом файле в индекс)
+	d - do not stage this hunk nor any of the remaining hunks in the file 
+	(не добавлять в индекс ни этот, ни последующие куски в этом файле)
+	g - select a hunk to go to 
+	(выбрать кусок и перейти к нему)
+	/ - search for a hunk matching the given regex 
+	(поиск куска по регулярному выражению)
+	j - leave this hunk undecided, see next undecided hunk 
+	(отложить решение для этого куска, перейти к следующему отложенному куску)
+	J - leave this hunk undecided, see next hunk 
+	(отложить решение для этого куска, перейти к следующему куску)
+	k - leave this hunk undecided, see previous undecided hunk 
+	(отложить решение для этого куска, перейти к предыдущему отложенному куску)
+	K - leave this hunk undecided, see previous hunk 
+	(отложить решение для этого куска, перейти к предыдущему куску)
+	s - split the current hunk into smaller hunks 
+	(разбить текущий кусок на меньшие части)
+	e - manually edit the current hunk 
+	(отредактировать текущий кусок вручную)
 	? - print help (вывести справку)
 
 Как правило, вы будете использовать `y` или `n` для индексирования каждого куска, но индексирование всех кусков сразу в некоторых файлах или откладывание решения на потом также может оказаться полезным. Если вы добавите в индекс одну часть файла, а другую часть — нет, вывод статуса будет выглядеть так:
diff --git a/ru/09-git-internals/01-chapter9.markdown b/ru/09-git-internals/01-chapter9.markdown
index 7fed573..1bc5083 100644
--- a/ru/09-git-internals/01-chapter9.markdown
+++ b/ru/09-git-internals/01-chapter9.markdown
@@ -260,7 +260,9 @@ Git создаёт заголовок, начинающийся с типа об
 Git дописывает содержимое после заголовка и вычисляет SHA-1 сумму для полученного результата. В Ruby значение SHA-1 для строки можно получить, подключив соответствующую библиотеку командой `require` и затем воспользовавшись вызовом `Digest::SHA1.hexdigest()`:
 
 	>> store = header + content
-	=> "blob 34\000\320\225\321\201\321\202\321\214 \320\277\321\200\320\276\320\261\320\273\320\265\320\274\321\213, \321\210\320\265\321\204?"
+	=> "blob 34\000\320\225\321\201\321\202\321\214 
+	    \320\277\321\200\320\276\320\261\320\273\320\265\320\274\321\213,
+	    \321\210\320\265\321\204?"
 	>> require 'digest/sha1'
 	=> true
 	>> sha1 = Digest::SHA1.hexdigest(store)
@@ -271,7 +273,9 @@ Git сжимает новые данные при помощи zlib. В Ruby э
 	>> require 'zlib'
 	=> true
 	>> zlib_content = Zlib::Deflate.deflate(store)
-	=> "x\234\001*\000\325\377blob 34\000\320\225\321\201\321\202\321\214 \320\277\321\200\320\276\320\261\320\273\320\265\320\274\321\213, \321\210\320\265\321\204?\3453\030S"
+	=> "x\234\001*\000\325\377blob 34\000\320\225\321\201\321\202\321\214 
+	    \320\277\321\200\320\276\320\261\320\273\320\265\320\274\321\213, 
+	    \321\210\320\265\321\204?\3453\030S"
 
 После этого запишем сжатую zlib'ом строку в объект на диск. Определим путь к файлу, который будет записан (первые два символа хеша используются в качестве названия подкаталога, оставшиеся 38 — в качестве имени файла в этом каталоге). В Ruby для этой задачи можно использовать функцию `FileUtils.mkdir_p()` для создания подкаталога, если он не существует. Далее, откроем файл вызовом `File.open()` и запишем наши сжатые данные вызовом `write()` для полученного файлового дескриптора:
 
-- 
1.8.1.2

